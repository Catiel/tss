package com.simulation.gui; // Declaraci√≥n del paquete que contiene las clases de interfaz gr√°fica de usuario (GUI) de la simulaci√≥n

import com.simulation.core.ReplicationManager; // Importa la clase ReplicationManager para acceder al gestor de r√©plicas y sus estad√≠sticas agregadas
import com.simulation.statistics.Statistics; // Importa la clase Statistics para acceder a las estad√≠sticas individuales de cada r√©plica
import javafx.geometry.Insets; // Importa la clase Insets de JavaFX para definir m√°rgenes y espaciado interno
import javafx.scene.chart.*; // Importa todas las clases de gr√°ficas de JavaFX (BarChart, LineChart, etc.)
import javafx.scene.control.Label; // Importa la clase Label de JavaFX para etiquetas de texto (aunque no se usa actualmente en el c√≥digo)
import javafx.scene.control.Tab; // Importa la clase Tab de JavaFX para crear pesta√±as en el TabPane
import javafx.scene.control.TabPane; // Importa la clase TabPane de JavaFX para crear un contenedor con pesta√±as
import javafx.scene.layout.VBox; // Importa la clase VBox de JavaFX para crear un contenedor de layout vertical

import java.util.List; // Importa la interfaz List de Java para trabajar con listas de estad√≠sticas

public class ChartPanel extends VBox { // Declaraci√≥n de la clase p√∫blica ChartPanel que extiende VBox para ser un contenedor vertical de gr√°ficas

    private BarChart<String, Number> utilizationChart; // Variable privada que almacena la gr√°fica de barras de utilizaci√≥n por locaci√≥n
    private BarChart<String, Number> throughputChart; // Variable privada que almacena la gr√°fica de barras de throughput por r√©plica
    private LineChart<String, Number> systemTimeChart; // Variable privada que almacena la gr√°fica de l√≠neas de tiempo en sistema por r√©plica

    public ChartPanel() { // Constructor p√∫blico que inicializa el panel de gr√°ficas sin recibir par√°metros
        setPadding(new Insets(10)); // Establece un margen interno de 10 p√≠xeles en todos los lados del contenedor
        setSpacing(10); // Establece un espaciado de 10 p√≠xeles entre los elementos hijos del VBox
        initializeCharts(); // Llama al m√©todo para inicializar todas las gr√°ficas y pesta√±as
    } // Cierre del constructor ChartPanel

    private void initializeCharts() { // M√©todo privado que inicializa el TabPane con las tres gr√°ficas en pesta√±as separadas
        TabPane tabPane = new TabPane(); // Crea una nueva instancia de TabPane para contener las pesta√±as de gr√°ficas
        tabPane.setTabClosingPolicy(TabPane.TabClosingPolicy.UNAVAILABLE); // Establece que las pesta√±as no puedan cerrarse por el usuario

        // Gr√°fica de Utilizaci√≥n
        Tab utilizationTab = new Tab("üìä Utilizaci√≥n por Locaci√≥n"); // Crea una nueva pesta√±a con el t√≠tulo y emoji de utilizaci√≥n
        utilizationTab.setContent(createUtilizationChart()); // Establece el contenido de la pesta√±a llamando al m√©todo que crea la gr√°fica de utilizaci√≥n

        // Gr√°fica de Throughput
        Tab throughputTab = new Tab("üìà Throughput por R√©plica"); // Crea una nueva pesta√±a con el t√≠tulo y emoji de throughput
        throughputTab.setContent(createThroughputChart()); // Establece el contenido de la pesta√±a llamando al m√©todo que crea la gr√°fica de throughput

        // Gr√°fica de Tiempo en Sistema
        Tab systemTimeTab = new Tab("‚è± Tiempo en Sistema"); // Crea una nueva pesta√±a con el t√≠tulo y emoji de tiempo en sistema
        systemTimeTab.setContent(createSystemTimeChart()); // Establece el contenido de la pesta√±a llamando al m√©todo que crea la gr√°fica de tiempo en sistema

        tabPane.getTabs().addAll(utilizationTab, throughputTab, systemTimeTab); // Agrega las tres pesta√±as al TabPane en el orden especificado
        getChildren().add(tabPane); // Agrega el TabPane como hijo de este VBox para que sea visible
        VBox.setVgrow(tabPane, javafx.scene.layout.Priority.ALWAYS); // Establece que el TabPane debe expandirse verticalmente para ocupar todo el espacio disponible
    } // Cierre del m√©todo initializeCharts

    private VBox createUtilizationChart() { // M√©todo privado que crea y retorna un VBox conteniendo la gr√°fica de utilizaci√≥n
        VBox container = new VBox(10); // Crea un nuevo VBox con espaciado de 10 p√≠xeles entre elementos
        container.setPadding(new Insets(10)); // Establece un margen interno de 10 p√≠xeles en todos los lados del contenedor

        CategoryAxis xAxis = new CategoryAxis(); // Crea un nuevo eje X categ√≥rico para mostrar nombres de locaciones
        xAxis.setLabel("Locaci√≥n"); // Establece la etiqueta del eje X como "Locaci√≥n"

        NumberAxis yAxis = new NumberAxis(); // Crea un nuevo eje Y num√©rico para mostrar porcentajes
        yAxis.setLabel("% Utilizaci√≥n"); // Establece la etiqueta del eje Y como "% Utilizaci√≥n"
        yAxis.setAutoRanging(false); // Desactiva el auto-ajuste del rango del eje Y para establecer valores fijos
        yAxis.setLowerBound(0); // Establece el l√≠mite inferior del eje Y en 0
        yAxis.setUpperBound(100); // Establece el l√≠mite superior del eje Y en 100 (porque es porcentaje)

        utilizationChart = new BarChart<>(xAxis, yAxis); // Crea una nueva gr√°fica de barras con los ejes X e Y definidos y la asigna a la variable de instancia
        utilizationChart.setTitle("Utilizaci√≥n de Locaciones - Promedio de 3 R√©plicas"); // Establece el t√≠tulo de la gr√°fica
        utilizationChart.setLegendVisible(false); // Oculta la leyenda porque solo hay una serie de datos

        VBox.setVgrow(utilizationChart, javafx.scene.layout.Priority.ALWAYS); // Establece que la gr√°fica debe expandirse verticalmente para ocupar todo el espacio disponible
        container.getChildren().add(utilizationChart); // Agrega la gr√°fica al contenedor VBox

        return container; // Retorna el contenedor VBox con la gr√°fica
    } // Cierre del m√©todo createUtilizationChart

    private VBox createThroughputChart() { // M√©todo privado que crea y retorna un VBox conteniendo la gr√°fica de throughput
        VBox container = new VBox(10); // Crea un nuevo VBox con espaciado de 10 p√≠xeles entre elementos
        container.setPadding(new Insets(10)); // Establece un margen interno de 10 p√≠xeles en todos los lados del contenedor

        CategoryAxis xAxis = new CategoryAxis(); // Crea un nuevo eje X categ√≥rico para mostrar n√∫meros de r√©plicas
        xAxis.setLabel("R√©plica"); // Establece la etiqueta del eje X como "R√©plica"

        NumberAxis yAxis = new NumberAxis(); // Crea un nuevo eje Y num√©rico para mostrar valores de throughput
        yAxis.setLabel("Piezas por Hora"); // Establece la etiqueta del eje Y como "Piezas por Hora"

        throughputChart = new BarChart<>(xAxis, yAxis); // Crea una nueva gr√°fica de barras con los ejes X e Y definidos y la asigna a la variable de instancia
        throughputChart.setTitle("Throughput del Sistema por R√©plica"); // Establece el t√≠tulo de la gr√°fica
        throughputChart.setLegendVisible(false); // Oculta la leyenda porque solo hay una serie de datos

        VBox.setVgrow(throughputChart, javafx.scene.layout.Priority.ALWAYS); // Establece que la gr√°fica debe expandirse verticalmente para ocupar todo el espacio disponible
        container.getChildren().add(throughputChart); // Agrega la gr√°fica al contenedor VBox

        return container; // Retorna el contenedor VBox con la gr√°fica
    } // Cierre del m√©todo createThroughputChart

    private VBox createSystemTimeChart() { // M√©todo privado que crea y retorna un VBox conteniendo la gr√°fica de tiempo en sistema
        VBox container = new VBox(10); // Crea un nuevo VBox con espaciado de 10 p√≠xeles entre elementos
        container.setPadding(new Insets(10)); // Establece un margen interno de 10 p√≠xeles en todos los lados del contenedor

        CategoryAxis xAxis = new CategoryAxis(); // Crea un nuevo eje X categ√≥rico para mostrar n√∫meros de r√©plicas
        xAxis.setLabel("R√©plica"); // Establece la etiqueta del eje X como "R√©plica"

        NumberAxis yAxis = new NumberAxis(); // Crea un nuevo eje Y num√©rico para mostrar valores de tiempo en minutos
        yAxis.setLabel("Minutos"); // Establece la etiqueta del eje Y como "Minutos"

        systemTimeChart = new LineChart<>(xAxis, yAxis); // Crea una nueva gr√°fica de l√≠neas con los ejes X e Y definidos y la asigna a la variable de instancia
        systemTimeChart.setTitle("Tiempo Promedio en Sistema por R√©plica"); // Establece el t√≠tulo de la gr√°fica
        systemTimeChart.setCreateSymbols(true); // Habilita la creaci√≥n de s√≠mbolos (puntos) en cada punto de datos de la l√≠nea
        systemTimeChart.setLegendVisible(true); // Muestra la leyenda para identificar las series de datos

        VBox.setVgrow(systemTimeChart, javafx.scene.layout.Priority.ALWAYS); // Establece que la gr√°fica debe expandirse verticalmente para ocupar todo el espacio disponible
        container.getChildren().add(systemTimeChart); // Agrega la gr√°fica al contenedor VBox

        return container; // Retorna el contenedor VBox con la gr√°fica
    } // Cierre del m√©todo createSystemTimeChart

    public void updateCharts(ReplicationManager.AggregatedStatistics aggStats) { // M√©todo p√∫blico que actualiza todas las gr√°ficas con nuevas estad√≠sticas agregadas recibiendo las estad√≠sticas como par√°metro
        if (aggStats == null) return; // Si las estad√≠sticas agregadas son null, sale del m√©todo prematuramente

        List<Statistics> allStats = aggStats.getAllStatistics(); // Obtiene la lista de todas las estad√≠sticas individuales de cada r√©plica
        if (allStats.isEmpty()) return; // Si la lista de estad√≠sticas est√° vac√≠a, sale del m√©todo prematuramente

        updateUtilizationChart(allStats); // Llama al m√©todo para actualizar la gr√°fica de utilizaci√≥n con las estad√≠sticas
        updateThroughputChart(allStats); // Llama al m√©todo para actualizar la gr√°fica de throughput con las estad√≠sticas
        updateSystemTimeChart(allStats); // Llama al m√©todo para actualizar la gr√°fica de tiempo en sistema con las estad√≠sticas
    } // Cierre del m√©todo updateCharts

    private void updateUtilizationChart(List<Statistics> allStats) { // M√©todo privado que actualiza la gr√°fica de utilizaci√≥n recibiendo la lista de estad√≠sticas como par√°metro
        utilizationChart.getData().clear(); // Limpia todos los datos existentes de la gr√°fica de utilizaci√≥n

        XYChart.Series<String, Number> series = new XYChart.Series<>(); // Crea una nueva serie de datos para la gr√°fica
        series.setName("% Utilizaci√≥n Promedio"); // Establece el nombre de la serie como "% Utilizaci√≥n Promedio"

        // Calcular promedios por locaci√≥n
        String[] locations = {"LAVADORA", "ALMACEN_PINTURA", "PINTURA", // Define un array con los nombres de las locaciones para las cuales se calcular√° la utilizaci√≥n
                             "ALMACEN_HORNO", "HORNO", "INSPECCION"}; // Continuaci√≥n del array de nombres de locaciones

        for (String locName : locations) { // Bucle for-each que itera sobre cada nombre de locaci√≥n en el array
            double avgUtil = 0; // Inicializa el acumulador de utilizaci√≥n promedio en 0
            int count = 0; // Inicializa el contador de r√©plicas v√°lidas en 0
            for (Statistics stats : allStats) { // Bucle for-each interno que itera sobre cada estad√≠stica de r√©plica
                if (stats.getLocation(locName) != null) { // Condici√≥n que verifica si la locaci√≥n existe en esta estad√≠stica
                    avgUtil += stats.getLocation(locName).getUtilization(stats.getSimulationDuration()); // Acumula el porcentaje de utilizaci√≥n de esta locaci√≥n en esta r√©plica
                    count++; // Incrementa el contador de r√©plicas v√°lidas
                } // Cierre del bloque condicional if
            } // Cierre del bucle for-each interno
            if (count > 0) { // Condici√≥n que verifica si se encontr√≥ al menos una r√©plica v√°lida para esta locaci√≥n
                avgUtil /= count; // Calcula el promedio de utilizaci√≥n dividiendo la suma acumulada entre el n√∫mero de r√©plicas
                series.getData().add(new XYChart.Data<>(locName, avgUtil)); // Agrega un punto de datos a la serie con el nombre de la locaci√≥n y su utilizaci√≥n promedio
            } // Cierre del bloque condicional if
        } // Cierre del bucle for-each externo

        utilizationChart.getData().add(series); // Agrega la serie completa de datos a la gr√°fica de utilizaci√≥n
    } // Cierre del m√©todo updateUtilizationChart

    private void updateThroughputChart(List<Statistics> allStats) { // M√©todo privado que actualiza la gr√°fica de throughput recibiendo la lista de estad√≠sticas como par√°metro
        throughputChart.getData().clear(); // Limpia todos los datos existentes de la gr√°fica de throughput

        XYChart.Series<String, Number> series = new XYChart.Series<>(); // Crea una nueva serie de datos para la gr√°fica
        series.setName("Throughput"); // Establece el nombre de la serie como "Throughput"

        for (int i = 0; i < allStats.size(); i++) { // Bucle for que itera sobre cada estad√≠stica en la lista usando √≠ndice
            Statistics stats = allStats.get(i); // Obtiene la estad√≠stica de la r√©plica en el √≠ndice actual
            series.getData().add(new XYChart.Data<>("R√©plica " + (i + 1), stats.getThroughput())); // Agrega un punto de datos con el nombre de la r√©plica (base 1) y su throughput
        } // Cierre del bucle for

        throughputChart.getData().add(series); // Agrega la serie completa de datos a la gr√°fica de throughput
    } // Cierre del m√©todo updateThroughputChart

    private void updateSystemTimeChart(List<Statistics> allStats) { // M√©todo privado que actualiza la gr√°fica de tiempo en sistema recibiendo la lista de estad√≠sticas como par√°metro
        systemTimeChart.getData().clear(); // Limpia todos los datos existentes de la gr√°fica de tiempo en sistema

        XYChart.Series<String, Number> avgSeries = new XYChart.Series<>(); // Crea una nueva serie de datos para la gr√°fica
        avgSeries.setName("Tiempo Promedio"); // Establece el nombre de la serie como "Tiempo Promedio"

        for (int i = 0; i < allStats.size(); i++) { // Bucle for que itera sobre cada estad√≠stica en la lista usando √≠ndice
            Statistics stats = allStats.get(i); // Obtiene la estad√≠stica de la r√©plica en el √≠ndice actual
            avgSeries.getData().add(new XYChart.Data<>("R√©plica " + (i + 1), stats.getAverageSystemTime())); // Agrega un punto de datos con el nombre de la r√©plica (base 1) y su tiempo promedio en sistema
        } // Cierre del bucle for

        systemTimeChart.getData().add(avgSeries); // Agrega la serie completa de datos a la gr√°fica de tiempo en sistema
    } // Cierre del m√©todo updateSystemTimeChart

    public void clear() { // M√©todo p√∫blico que limpia todas las gr√°ficas eliminando todos sus datos
        utilizationChart.getData().clear(); // Limpia todos los datos de la gr√°fica de utilizaci√≥n
        throughputChart.getData().clear(); // Limpia todos los datos de la gr√°fica de throughput
        systemTimeChart.getData().clear(); // Limpia todos los datos de la gr√°fica de tiempo en sistema
    } // Cierre del m√©todo clear
} // Cierre de la clase ChartPanel
